// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array                  = require("bs-platform/lib/js/array.js");
var Block                    = require("bs-platform/lib/js/block.js");
var Curry                    = require("bs-platform/lib/js/curry.js");
var Printf                   = require("bs-platform/lib/js/printf.js");
var Random                   = require("bs-platform/lib/js/random.js");
var Hashtbl                  = require("bs-platform/lib/js/hashtbl.js");
var Caml_obj                 = require("bs-platform/lib/js/caml_obj.js");
var Caml_array               = require("bs-platform/lib/js/caml_array.js");
var Caml_builtin_exceptions  = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Blackjack$Blackjackagent = require("./blackjack.bs.js");

var q = Hashtbl.create(/* None */0, 420);

var actions = $$Array.of_list(/* :: */[
      /* Hit */0,
      /* :: */[
        /* Stand */1,
        /* [] */0
      ]
    ]);

function round_to_q_key(round, action) {
  return /* tuple */[
          Blackjack$Blackjackagent.hand_value(round[/* dealer_hand */0]),
          Blackjack$Blackjackagent.hand_value(round[/* player_hand */1]),
          action
        ];
}

function get_q_value(round, action) {
  var key = round_to_q_key(round, action);
  try {
    return Hashtbl.find(q, key);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return 0.0;
    } else {
      throw exn;
    }
  }
}

function argmax(arr) {
  var _current_index = 0;
  var _max_index = 0;
  while(true) {
    var max_index = _max_index;
    var current_index = _current_index;
    if (current_index >= arr.length) {
      return max_index;
    } else if (Caml_obj.caml_greaterthan(Caml_array.caml_array_get(arr, current_index), Caml_array.caml_array_get(arr, max_index))) {
      _max_index = current_index;
      _current_index = current_index + 1 | 0;
      continue ;
      
    } else {
      _current_index = current_index + 1 | 0;
      continue ;
      
    }
  };
}

function select_action_epsilon(eps, round) {
  if (Random.$$float(100.0) < eps) {
    return Caml_array.caml_array_get(actions, Random.$$int(actions.length));
  } else {
    var action_values = $$Array.map((function (param) {
            return get_q_value(round, param);
          }), actions);
    var max_action_index = argmax(action_values);
    return Caml_array.caml_array_get(actions, max_action_index);
  }
}

function get_reward(round) {
  var match = round[/* state */2];
  switch (match) {
    case 0 : 
        return /* tuple */[
                0.0,
                /* Nonterminal */0
              ];
    case 1 : 
        return /* tuple */[
                -10.0,
                /* Terminal */1
              ];
    case 2 : 
        return /* tuple */[
                10.0,
                /* Terminal */1
              ];
    case 3 : 
        return /* tuple */[
                0.0,
                /* Terminal */1
              ];
    
  }
}

function update_q(old_state, action, next_state, policy) {
  var q_value = get_q_value(old_state, action);
  var match = get_reward(next_state);
  var next_action = Curry._1(policy, next_state);
  var next_q_value = get_q_value(next_state, next_action);
  var new_q_value = q_value + 0.1 * (match[0] + 0.9 * next_q_value - q_value);
  return Hashtbl.replace(q, round_to_q_key(old_state, action), new_q_value);
}

function run_episode(_round, epsilon) {
  while(true) {
    var round = _round;
    var select_action = function (param) {
      return select_action_epsilon(epsilon, param);
    };
    var action = select_action_epsilon(epsilon, round);
    var result_round = Blackjack$Blackjackagent.play(round, action);
    update_q(round, action, result_round, select_action);
    var match = get_reward(result_round);
    if (match[1] !== 0) {
      return /* () */0;
    } else {
      _round = result_round;
      continue ;
      
    }
  };
}

function train(iterations) {
  var epsilon = 50.0;
  var epsilon_decay = 1.0 - 1.0 / (iterations / 10 | 0);
  for(var _iteration = 1 ,_iteration_finish = iterations + 1 | 0; _iteration <= _iteration_finish; ++_iteration){
    epsilon = epsilon * epsilon_decay;
    run_episode(Blackjack$Blackjackagent.new_round(/* () */0), epsilon);
  }
  return /* () */0;
}

function action_to_string(action) {
  if (action !== 0) {
    return "S";
  } else {
    return "H";
  }
}

function best_action(dealer_value, player_value) {
  var get_action_value = function (action) {
    var key = /* tuple */[
      dealer_value,
      player_value,
      action
    ];
    try {
      return Hashtbl.find(q, key);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return 0.0;
      } else {
        throw exn;
      }
    }
  };
  var action_values = $$Array.map(get_action_value, actions);
  var max_action_index = argmax(action_values);
  return /* tuple */[
          Caml_array.caml_array_get(actions, max_action_index),
          Caml_array.caml_array_get(action_values, max_action_index)
        ];
}

function print_q() {
  Printf.printf(/* Format */[
        /* String_literal */Block.__(11, [
            "   ",
            /* End_of_format */0
          ]),
        "   "
      ]);
  for(var dealer_value = 2; dealer_value <= 11; ++dealer_value){
    Curry._1(Printf.printf(/* Format */[
              /* Int */Block.__(4, [
                  /* Int_i */3,
                  /* Lit_padding */Block.__(0, [
                      /* Right */1,
                      2
                    ]),
                  /* No_precision */0,
                  /* Char_literal */Block.__(12, [
                      /* " " */32,
                      /* End_of_format */0
                    ])
                ]),
              "%2i "
            ]), dealer_value);
  }
  Printf.printf(/* Format */[
        /* Char_literal */Block.__(12, [
            /* "\n" */10,
            /* End_of_format */0
          ]),
        "\n"
      ]);
  for(var player_value = 2; player_value <= 21; ++player_value){
    Curry._1(Printf.printf(/* Format */[
              /* Int */Block.__(4, [
                  /* Int_i */3,
                  /* Lit_padding */Block.__(0, [
                      /* Right */1,
                      2
                    ]),
                  /* No_precision */0,
                  /* Char_literal */Block.__(12, [
                      /* " " */32,
                      /* End_of_format */0
                    ])
                ]),
              "%2i "
            ]), player_value);
    for(var dealer_value$1 = 2; dealer_value$1 <= 11; ++dealer_value$1){
      var match = best_action(dealer_value$1, player_value);
      Curry._1(Printf.printf(/* Format */[
                /* String */Block.__(2, [
                    /* Lit_padding */Block.__(0, [
                        /* Right */1,
                        2
                      ]),
                    /* Char_literal */Block.__(12, [
                        /* " " */32,
                        /* End_of_format */0
                      ])
                  ]),
                "%2s "
              ]), action_to_string(match[0]));
    }
    Printf.printf(/* Format */[
          /* Char_literal */Block.__(12, [
              /* "\n" */10,
              /* End_of_format */0
            ]),
          "\n"
        ]);
  }
  return /* () */0;
}

train(3000000);

print_q(/* () */0);

var alpha = 0.1;

var gamma = 0.9;

exports.q                     = q;
exports.alpha                 = alpha;
exports.gamma                 = gamma;
exports.actions               = actions;
exports.round_to_q_key        = round_to_q_key;
exports.get_q_value           = get_q_value;
exports.argmax                = argmax;
exports.select_action_epsilon = select_action_epsilon;
exports.get_reward            = get_reward;
exports.update_q              = update_q;
exports.run_episode           = run_episode;
exports.train                 = train;
exports.action_to_string      = action_to_string;
exports.best_action           = best_action;
exports.print_q               = print_q;
/* q Not a pure module */
